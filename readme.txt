                                              GULP-START / 02.10.2024


ПРО ЗБІРКУ
--------------------------------------------------
Автор: Андрій Овчаров;
Дата збірки: 02.10.2024;
Опис: Збірка "Gulp-start_DatoshCode" є допоміжним інструментом для веброзробника, що дозволяє виконувати розробку вебсайтів швидше та зручніше, адже має перелік відповідних плагінів та передбачає модульну будову проекту. 

Збірка підтримує: 
Gulp: CLI version: 2.3.0
Node JS: 20.9.0

ЗБІРКА ДОЗВОЛЯЄ:
-------------------------------------------------
- конвертувати файли стилів .scss у .css з підтримкою автопрефіксерів та sourcemaps;
- мініфікувати (стискати) файли .css, .js та файли зображень;
- виконувати розробку вебсайту в live-режимі з автоматичним оновленням сторінок та без кешування завдяки BrowserSync;
- конвертувати файли зображень .png та .jpg у формати .avif та .webp;
- оптимізувати файли .svg та виконувати очищення кешу зображень;
- конвертувати файли шрифтів з .ttf та .otf у .woff та .woff2, оптимізувати шрифти;
- перевіряти .css файли на помилки та відповідність стандартам за допомогою CSS Lint;
- підтримує модульну будову, розробку вебсайту з окремих компонентів;
- показувати нотифікації про помилки під час компіляції стилів та скриптів.


КОМАНДИ ТЕРМІНАЛА ТА КОМБІНАЦІЇ КЛАВІШ ДЛЯ РОБОТИ З ПРОЄКТОМ:
----------------------------------------------------
Розгорнути стартову збірку на комп'ютері: npm i
Запустити gulp: gulp
Завершити роботу gulp: Ctrl+C
Зібрати остаточний проєкт: gulp build


ПЕРЕВІРКА РОБОЧОГО СТАНУ ЗБІРКИ:
----------------------------------------------------
Після розпаковки вмісту архіву у теку з проєктом необхідно розгорнути Збірку (команда: npm i) та запустити Gulp (команда: gulp).
Якщо у вікні браузера відобразиться текст привітання, то збірка працює коректно, і її можна використовувати.


РОБОТА З ФАЙЛАМИ ПРОЄКТА
---------------------------------------------------

Робота із зображеннями:
Всі вихідні зображення потрібно зберігати у теці app/images/src. Через те що збірка відразу конвертує зображення в три формати: .jpeg, .avif та .webp, є можливість обрати потрібний формат на бек-енді.
Зображення іконок не ковертуються, а лише стискаються. Такі зображення необхідно зберігати в окремій теці: app/images/src/icons. Після обробки, зображення іконок буде автоматично додано до теки: app/images/icons.


Робота зі шрифтами:
---------------------------------------------------
Всі вихідні шрифти у форматі .ttf та .otf необхідно зберігати у теці: app/fonts/src. Всі вони будуть конвертовані у формати: woff та woff2 та переміщені до теки: app/fonts.


Робота зі стилями css:
---------------------------------------------------
Переважна більшість вихідних стилів необхідно прописувати у файлі style.scss за адресою app/scss, а стилі сторонніх плагінів, а також окремі стилі-компоненти, рекомендується підключати через @import.
При цьому структура таких компонентів має наступний вигляд:

@import 'vars';  // Вказуються змінні

@import 'fonts'; // Вказуються шрифти

@import 'optimize';  // reset css

@import 'libs';  // Вказуються стилі до плагінів

@import 'global';  // Вказуються глобальні стилі

@import 'media';   // Вказуються стилі для адаптиву



Робота зі скриптами js:
----------------------------------------------------
Усі вихідні скрипти бажано прописувати у файлі main.js за адресою app/js. Скрипти плагінів, встановлені через npm, необхідно прописувати gulpfile.js.



Робота зі сторінками html:
----------------------------------------------------
Всі сторінки html слід зберігати за адресою: app/pages, а окремі їх компоненти (header.html, sidebar.html, footer.html та ін.) рекомендується зберігати за адресою: app/components і під'єднувати до html-сторінок, через include.

Наприклад: <!--=include footer.html-->.


Установка плагіна до Збірки:
---------------------------------------------------
Для встановлення нового плагіна варто ввести команду в термінал:
npm i "назва пакета" -D

Наприклад:
npm i swiper -D

Новий пакет встановлюється в папку "node_modules".

Для підключення скриптів плагіну необхідно у файлі gulpfile.js перейти до розділу "Scripts і return src([...])" та на самому початку прописати шлях до файлу js плагіна (не мініфікований). 

Приклад з плагіном "swiper".

// Scripts
function scripts() {
   return src([
     "node_modules/swiper/swiper-bundle.js", <-- рядок вказівки шляху до плагіна .js
     "app/js/main.js"
])
...
}

А файли стилів для цього плагіна краще під"єднувати через @import у файлі style.scss, де на початку пишемо:

@import '../../node_modules/swiper/swiper-bundle';

або у файлі "_libs.scss"

без розширення .css!



ЗАГАЛЬНІ РЕКОМЕНТАЦІЇ для розробки вебсайту
---------------------------------------------------

1. Намагайся не створювати безкінечну купу медіа-запитів при адаптиві вебсайту. Чим менше, то тим краще!;

2. Для створення резервних копій проєкту та збереження результату своєї праці, обов'язково користуйся Git-ом!

3. Використовуй відносні одиниці (em, rem, vh та інше).

4. Візьми собі у звичку відділяти коментарями будову свого проєкту. 
Так наприклад, рекомендується на початку великого блоку коду вказати його початок так кінець наступним коментарем:

<!-- About us -->

... code ...

<!--END/ About us -->

5. Перевіряй верстку на переповнення контентом та адаптивність.

6. Намагайся бути постійним та послідовним у своїх діях та візьми за звичку використовувати на протязі всього проєкту єдиний стандарт.
Наприклад, якщо вже почав вказувати колір використовуючи кодування rgb та rgba, то не варто посеред проєкту змінювати на hex. 

7. Бажано тегу <a> та кнопкам <button> присвоювати атрибут arial-label та зазанчати що це за елемент. Нариклад: <a href="http:// ... " arial-label="Дізнатися більше про песика Патрон"> Читати більше </a>. Та <button arial-label="Вікрити меню">Меню</button>. 

8. Варто бути послідовним при зазначенні тегів заголовків та не переплигувати з тега h1 на h3.

9. Якщо фронт-частина сайту надалі буде переміщуватися на CMS WordPress, то зображення які можуть змінюватися адміністратором сайту, варто прописувати в .html, а не в .scss.  

10. Рекомендується шрифти під'єднувати через Google fonts (https://fonts.google.com/) та лише якщо необхідний шрифт не можливо знайти в Google fonts, то завантажувати шрифти окремими файлами. Такі файли варто зберігати у теці: app/fonts/src, для їх подальшого конвертування.

11. Бажано використовувати не більше двох вкладень до блоків, при написанні scss.



Та пам'ятай: "Майбутнє на кінчиках твоїх пальців. Пиши код!" ;)
